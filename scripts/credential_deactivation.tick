// This script is meant as a sample for sending alerts whenever a Kloudless
// account is marked as inactive.
var db = 'telegraf'
var rp = 'two_weeks'
var measurement = 'error_celery_credentials_update_credential_deactivation'

var groupBy = []
var whereFilter = lambda: TRUE
var name = 'Credential Deactivations'
var idVar = name + ':{{.Group}}'
var message = '{{ index .Fields "service" }} credential deactivated, credential_id = {{ index .Fields "credential_id" }}'
var idTag = 'alertID'
var levelTag = 'level'
var messageField = 'message'
var durationField = 'duration'

var outputDB = 'telegraf'
var outputRP = 'one_week'
var outputMeasurement = 'alerts_credential_deactivations'

var triggerType = 'threshold'
var crit = 0

var data = stream
    |from()
        .database(db)
        .retentionPolicy(rp)
        .measurement(measurement)
        .groupBy(groupBy)
        .where(whereFilter)
    |eval(lambda: "service", lambda: "credential_id", lambda: "application_id", lambda:"error_id")
        .as('service', 'credential_id', 'application_id', 'error_id')

var trigger = data
    |alert()
        .crit(lambda: TRUE)
        .message(message)
        .id(idVar)
        .idTag(idTag)
        .levelTag(levelTag)
        .messageField(messageField)
        .durationField(durationField)
        .log('/tmp/alerts.log')

trigger
    |influxDBOut()
        .create()
        .database(outputDB)
        .retentionPolicy(outputRP)
        .measurement(outputMeasurement)
        .tag('alertName', name)
        .tag('triggerType', triggerType)

trigger
    |httpOut('output')
